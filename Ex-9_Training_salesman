import sys

def tsp(graph):
    n = len(graph)
    # dp table to store the minimum distance
    dp = [[float('inf')] * (1 << n) for _ in range(n)]
    dp[0][1] = 0  # Starting node is 0, so distance is 0
    
    # Iterate through all possible subsets of vertices
    for mask in range(1, (1 << n)):
        for u in range(n):
            if mask & (1 << u):  # If vertex u is in the subset
                for v in range(n):
                    if v != u and mask & (1 << v):  # If vertex v is also in the subset
                        dp[u][mask] = min(dp[u][mask], dp[v][mask ^ (1 << u)] + graph[v][u])

    # Finding the minimum distance from the last node to the starting node
    min_distance = sys.maxsize
    for v in range(1, n):
        min_distance = min(min_distance, dp[v][(1 << n) - 1] + graph[v][0])

    return min_distance

if __name__ == "__main__":
    # Example graph representing distances between cities
    graph = [
        [0, 10, 15, 20],
        [10, 0, 35, 25],
        [15, 35, 0, 30],
        [20, 25, 30, 0]
    ]
    print("Minimum distance for TSP:", tsp(graph))
