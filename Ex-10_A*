import heapq

class Node:
    def __init__(self, state, parent=None, g=0, h=0):
        self.state = state  # Current state or position
        self.parent = parent  # Parent node
        self.g = g  # Cost from start node to current node
        self.h = h  # Heuristic cost from current node to goal node

    def f(self):
        return self.g + self.h

class AStar:
    def __init__(self, start_state, goal_state, grid, heuristic):
        self.start_node = Node(start_state)
        self.goal_state = goal_state
        self.grid = grid
        self.heuristic = heuristic

    def get_neighbors(self, node):
        neighbors = []
        for i, j in [(1, 0), (-1, 0), (0, 1), (0, -1)]:
            x, y = node.state[0] + i, node.state[1] + j
            if 0 <= x < len(self.grid) and 0 <= y < len(self.grid[0]) and self.grid[x][y] != '#':
                neighbors.append(Node((x, y)))
        return neighbors

    def search(self):
        open_set = [self.start_node]
        closed_set = set()

        while open_set:
            current_node = min(open_set, key=lambda x: x.f())
            if current_node.state == self.goal_state:
                path = []
                while current_node:
                    path.append(current_node.state)
                    current_node = current_node.parent
                return path[::-1]

            open_set.remove(current_node)
            closed_set.add(current_node.state)

            for neighbor in self.get_neighbors(current_node):
                if neighbor.state in closed_set:
                    continue

                neighbor.g = current_node.g + 1
                neighbor.h = self.heuristic(neighbor.state, self.goal_state)
                neighbor.parent = current_node

                if neighbor not in open_set:
                    open_set.append(neighbor)

        return None

def manhattan_distance(state, goal_state):
    return abs(state[0] - goal_state[0]) + abs(state[1] - goal_state[1])

if __name__ == "__main__":
    grid = [
        ['#', 'S', '#', '#', '#',],
        ['#', ' ', ' ', '#', '#',],
        ['#', ' ', '#', ' ', '#',],
        ['#', ' ', ' ', ' ', 'G',],
        ['#', '#', '#', '#', '#',],
    ]

    start_state = (0, 1)
    goal_state = (3, 4)

    astar = AStar(start_state, goal_state, grid, manhattan_distance)
    path = astar.search()

    if path:
        print("Path found:")
        for row in range(len(grid)):
            for col in range(len(grid[0])):
                if (row, col) == start_state:
                    print('S', end=' ')
                elif (row, col) == goal_state:
                    print('G', end=' ')
                elif (row, col) in path:
                    print('*', end=' ')
                else:
                    print(grid[row][col], end=' ')
            print()
    else:
        print("No path found.")
